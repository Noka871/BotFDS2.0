"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–∞–±–±–µ—Ä–∞
"""
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from keyboards import (
    get_title_selection_keyboard,
    get_episode_status_keyboard,
    get_confirmation_keyboard
)
from models.database import AsyncSessionLocal, Title, UserTitle, Report
from utils.helpers import get_user_titles, get_user_by_id
from utils.states import DubberStates

router = Router()


class ReportStates(StatesGroup):
    selecting_title = State()
    selecting_episode = State()
    reporting_status = State()
    adding_comment = State()


@router.message(F.text == "üé≠ –í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª")
async def select_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–π—Ç–ª–∞"""
    async with AsyncSessionLocal() as session:
        user = await get_user_by_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        user_titles = await get_user_titles(session, user.user_id)

        if not user_titles:
            await message.answer("üé≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        title_names = [title.name for title in user_titles]
        keyboard = get_title_selection_keyboard(title_names)

        await message.answer("üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª:", reply_markup=keyboard)
        await state.set_state(ReportStates.selecting_title)


@router.callback_query(F.data.startswith("select_title:"))
async def process_title_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π—Ç–ª–∞"""
    title_name = callback.data.split(":")[1]

    async with AsyncSessionLocal() as session:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–π—Ç–ª –≤ –±–∞–∑–µ
        result = await session.execute(select(Title).where(Title.name == title_name))
        title = result.scalar_one_or_none()

        if title:
            await state.update_data(selected_title_id=title.id, selected_title_name=title.name)
            await callback.message.edit_text(
                f"üé¨ –í—ã–±—Ä–∞–Ω —Ç–∞–π—Ç–ª: <b>{title.name}</b>\n"
                f"üì∫ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {title.current_episode}\n"
                f"üìä –í—Å–µ–≥–æ —Å–µ—Ä–∏–π: {title.total_episodes}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
            )
            await state.set_state(ReportStates.selecting_episode)
        else:
            await callback.message.edit_text("‚ùå –¢–∞–π—Ç–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    await callback.answer()


@router.message(ReportStates.selecting_episode)
async def process_episode_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–∏–∏"""
    try:
        episode = int(message.text)
        data = await state.get_data()

        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–∏–∏
            result = await session.execute(select(Title).where(Title.id == data['selected_title_id']))
            title = result.scalar_one_or_none()

            if not title:
                await message.answer("‚ùå –¢–∞–π—Ç–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if episode < 1 or episode > title.total_episodes:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç 1 –¥–æ {title.total_episodes}.")
                return

            await state.update_data(selected_episode=episode)
            await message.answer(
                f"üì∫ –°–µ—Ä–∏—è {episode} —Ç–∞–π—Ç–ª–∞ <b>{title.name}</b>\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
                reply_markup=get_episode_status_keyboard()
            )
            await state.set_state(ReportStates.reporting_status)

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏.")


@router.callback_query(F.data.startswith("episode:"))
async def process_episode_status(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–∏–∏"""
    status = callback.data.split(":")[1]
    data = await state.get_data()

    if status == "submitted":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ —Å–¥–∞—á–µ
        async with AsyncSessionLocal() as session:
            user = await get_user_by_id(session, callback.from_user.id)

            report = Report(
                user_id=user.id,
                title_id=data['selected_title_id'],
                episode=data['selected_episode'],
                status="submitted",
                submitted_at=datetime.utcnow()
            )
            session.add(report)
            await session.commit()

        await callback.message.edit_text(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</b>\n\n"
            "–°–µ—Ä–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–¥–∞–Ω–Ω–∞—è.\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–µ—Ä–∏—é?",
            reply_markup=get_confirmation_keyboard()
        )

    elif status == "delayed":
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–µ</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–¥–µ—Ä–∂–∫–∏:"
        )
        await state.set_state(ReportStates.adding_comment)


@router.message(ReportStates.adding_comment)
async def process_delay_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ –∑–∞–¥–µ—Ä–∂–∫–µ"""
    data = await state.get_data()

    async with AsyncSessionLocal() as session:
        user = await get_user_by_id(session, message.from_user.id)

        report = Report(
            user_id=user.id,
            title_id=data['selected_title_id'],
            episode=data['selected_episode'],
            status="delayed",
            comment=message.text,
            submitted_at=datetime.utcnow()
        )
        session.add(report)
        await session.commit()

    await message.answer(
        "‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–µ—Ä–∂–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
        "–í–∞—à–∞ —Å–∏—Ç—É–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞. –¢–∞–π–º–µ—Ä –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–µ—Ä–∏—é?",
        reply_markup=get_confirmation_keyboard()
    )


@router.callback_query(F.data.startswith("confirm:"))
async def process_add_more(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–π —Å–µ—Ä–∏–∏"""
    confirm = callback.data.split(":")[1]

    if confirm == "yes":
        await callback.message.edit_text("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª:")
        await select_title(callback.message, state)
    else:
        await callback.message.edit_text("‚úÖ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.")
        await state.clear()

    await callback.answer()


@router.message(F.text == "üìã –ú–æ–∏ –¥–æ–ª–≥–∏")
async def show_debts(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏ –¥–∞–±–±–µ—Ä–∞"""
    async with AsyncSessionLocal() as session:
        user = await get_user_by_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        user_titles = await get_user_titles(session, user.user_id)

        if not user_titles:
            await message.answer("üé≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤.")
            return

        debts_text = "üìã <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:</b>\n\n"

        for title in user_titles:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ—Å–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π
            debts_text += f"üé¨ <b>{title.name}</b>\n"
            debts_text += f"üì∫ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {title.current_episode}\n"
            debts_text += f"‚è∞ –°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n"

        debts_text += "üí° –≠—Ç–æ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."

        await message.answer(debts_text)