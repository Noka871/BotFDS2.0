"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–∞–±–±–µ—Ä–∞
"""
from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler, MessageHandler, Filters
from database import Database
from utils.keyboards import get_dubber_menu_keyboard, get_titles_keyboard, get_episode_status_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_TITLE, SELECT_EPISODE, EPISODE_STATUS, FORCE_MAJEURE = range(4)

def dubber_menu_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –¥–∞–±–±–µ—Ä–∞"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        text="üìå –ú–µ–Ω—é –¥–∞–±–±–µ—Ä–∞:",
        reply_markup=get_dubber_menu_keyboard()
    )

def select_title_start(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ —Ç–∞–π—Ç–ª–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å–¥–∞—á–∏"""
    query = update.callback_query
    query.answer()
    
    db = Database()
    titles = db.get_dubber_titles(update.effective_user.id)
    
    if not titles:
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤.")
        return ConversationHandler.END
    
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª:",
        reply_markup=get_titles_keyboard(titles, 'dubber_title')
    )
    return SELECT_TITLE

def select_title(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π—Ç–ª–∞"""
    query = update.callback_query
    query.answer()
    
    title_id = int(query.data.split('_')[-1])
    context.user_data['current_title'] = title_id
    
    query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏:")
    return SELECT_EPISODE

def select_episode(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–∏–∏"""
    try:
        episode_number = int(update.message.text)
        if episode_number <= 0:
            raise ValueError
        
        context.user_data['current_episode'] = episode_number
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
            reply_markup=get_episode_status_keyboard()
        )
        return EPISODE_STATUS
    except ValueError:
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return SELECT_EPISODE

def episode_status(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–∏–∏"""
    query = update.callback_query
    query.answer()
    
    status = query.data.split('_')[-1]
    title_id = context.user_data['current_title']
    episode_number = context.user_data['current_episode']
    user_id = update.effective_user.id
    
    db = Database()
    
    if status == 'completed':
        db.set_episode_status(title_id, episode_number, user_id, 'completed')
        message = "‚úÖ –°–µ—Ä–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–¥–∞–Ω–Ω–∞—è!"
    elif status == 'delayed':
        db.set_episode_status(title_id, episode_number, user_id, 'delayed')
        message = "‚ö†Ô∏è –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É —Å–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:"
        query.edit_message_text(message)
        return FORCE_MAJEURE
    else:  # cancel
        message = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    
    query.edit_message_text(
        text=message + "\n\n–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Å–µ—Ä–∏—é?",
        reply_markup=get_dubber_menu_keyboard()
    )
    return ConversationHandler.END

def force_majeure_reason(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ (—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞)"""
    reason = update.message.text
    user_id = update.effective_user.id
    
    db = Database()
    db.add_force_majeure(user_id, reason)
    
    update.message.reply_text(
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!",
        reply_markup=get_dubber_menu_keyboard()
    )
    return ConversationHandler.END

def cancel_dubber_actions(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–∞–±–±–µ—Ä–∞"""
    update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_dubber_menu_keyboard()
    )
    return ConversationHandler.END

# –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –¥–∞–±–±–µ—Ä–∞
dubber_conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(select_title_start, pattern='^dubber_select_title$')
    ],
    states={
        SELECT_TITLE: [
            CallbackQueryHandler(select_title, pattern='^dubber_title_')
        ],
        SELECT_EPISODE: [
            MessageHandler(Filters.text & ~Filters.command, select_episode)
        ],
        EPISODE_STATUS: [
            CallbackQueryHandler(episode_status, pattern='^status_')
        ],
        FORCE_MAJEURE: [
            MessageHandler(Filters.text & ~Filters.command, force_majeure_reason)
        ]
    },
    fallbacks=[
        CommandHandler('cancel', cancel_dubber_actions),
        MessageHandler(Filters.command, cancel_dubber_actions)
    ]
)—ã