"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–∞–±–±–µ—Ä–∞
"""
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.database import get_db
from services.dubber_service import DubberService
from keyboards.dubber_menu import get_dubber_menu, get_episode_status_keyboard
import logging
from typing import List


class DubberStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è workflow –¥–∞–±–±–µ—Ä–∞"""
    selecting_title = State()  # –í—ã–±–æ—Ä —Ç–∞–π—Ç–ª–∞
    selecting_episode = State()  # –í—ã–±–æ—Ä —Å–µ—Ä–∏–∏
    reporting_status = State()  # –í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–∞—á–∏
    reporting_delay = State()  # –£–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏
    force_majeure = State()  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ


async def handle_select_title(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª'
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ —Ç–∞–π—Ç–ª–æ–≤
    """
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª' –æ—Ç {user_id} ({username})")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        service = DubberService(db)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π—Ç–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        titles = service.get_user_titles(user_id)

        if not titles:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π—Ç–ª—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        async with state.proxy() as data:
            data['user_titles'] = titles
            data['titles_dict'] = {i + 1: title for i, title in enumerate(titles)}

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∞–π—Ç–ª–æ–≤
        response = "üé¨ <b>–í–∞—à–∏ —Ç–∞–π—Ç–ª—ã:</b>\n\n"
        for i, title in enumerate(titles, 1):
            response += (f"<b>{i}.</b> {title.name}\n"
                         f"   üì∫ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>{title.current_episode}/{title.total_episodes}</b>\n"
                         f"   üÜî ID: <code>{title.id}</code>\n\n")

        response += "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> —Ç–∞–π—Ç–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
        await message.answer(response, parse_mode='HTML')
        await DubberStates.selecting_title.set()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–π—Ç–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ç–∞–π—Ç–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_title_selection(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–π—Ç–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Å–µ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    """
    user_id = message.from_user.id

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        title_index = int(message.text.strip())

        async with state.proxy() as data:
            titles_dict = data.get('titles_dict', {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
        if title_index not in titles_dict:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∞–π—Ç–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return

        selected_title = titles_dict[title_index]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–π—Ç–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['selected_title'] = selected_title
            data['selected_title_id'] = selected_title.id

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∞–π—Ç–ª–µ
        response = (f"üé¨ <b>–í—ã–±—Ä–∞–Ω —Ç–∞–π—Ç–ª:</b> {selected_title.name}\n"
                    f"üì∫ <b>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> {selected_title.current_episode}\n"
                    f"üî¢ <b>–í—Å–µ–≥–æ —Å–µ—Ä–∏–π:</b> {selected_title.total_episodes}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏</b> –¥–ª—è –æ—Ç—á–µ—Ç–∞ (1-{selected_title.total_episodes}):")

        await message.answer(response, parse_mode='HTML')
        await DubberStates.selecting_episode.set()

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> —Ç–∞–π—Ç–ª–∞ (—Ü–∏—Ñ—Ä—É):", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞–π—Ç–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def handle_episode_selection(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–∏–∏
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–∞—á–∏
    """
    user_id = message.from_user.id

    try:
        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏
        episode = int(message.text.strip())

        async with state.proxy() as data:
            selected_title = data.get('selected_title')

        if not selected_title:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–π—Ç–ª. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–∏–∏
        if episode < 1 or episode > selected_title.total_episodes:
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-{selected_title.total_episodes}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['selected_episode'] = episode

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–¥–∞—á–∏
        response = (f"üìã <b>–¢–∞–π—Ç–ª:</b> {selected_title.name}\n"
                    f"üéØ <b>–°–µ—Ä–∏—è:</b> {episode}\n\n"
                    f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–¥–∞—á–∏:</b>")

        await message.answer(response, parse_mode='HTML', reply_markup=get_episode_status_keyboard())
        await DubberStates.reporting_status.set()

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏</b> (—Ü–∏—Ñ—Ä—É):", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def handle_status_selection(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–∞—á–∏
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç '–°–µ—Ä–∏—é —Å–¥–∞–ª' –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –ø—Ä–∏—á–∏–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏
    """
    user_id = message.from_user.id
    status_text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
    if status_text not in ['–°–µ—Ä–∏—é —Å–¥–∞–ª', '–°–µ—Ä–∏—é –∑–∞–¥–µ—Ä–∂—É']:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:")
        return

    if status_text == '–°–µ—Ä–∏—é —Å–¥–∞–ª':
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–∞—á–∏
        await handle_episode_submitted(message, state)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –ø—Ä–∏—á–∏–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏
        await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <b>–ø—Ä–∏—á–∏–Ω—É –∑–∞–¥–µ—Ä–∂–∫–∏</b>:",
                             parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
        await DubberStates.reporting_delay.set()


async def handle_episode_submitted(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ —Å–µ—Ä–∏–∏
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = message.from_user.id

    try:
        async with state.proxy() as data:
            selected_title = data.get('selected_title')
            episode = data.get('selected_episode')

        if not selected_title or episode is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        service = DubberService(db)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ —Å–¥–∞—á–µ
        report = service.create_report(
            user_id=user_id,
            title_id=selected_title.id,
            episode=episode,
            status='submitted'
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        response = (f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</b>\n\n"
                    f"üé¨ <b>–¢–∞–π—Ç–ª:</b> {selected_title.name}\n"
                    f"üéØ <b>–°–µ—Ä–∏—è:</b> {episode}\n"
                    f"üïí <b>–í—Ä–µ–º—è —Å–¥–∞—á–∏:</b> {report.submitted_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–µ—Ä–∏—é?")

        await message.answer(response, parse_mode='HTML', reply_markup=get_dubber_menu())
        await state.finish()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()


async def handle_delay_reason(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–∞–¥–µ—Ä–∂–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = message.from_user.id
    delay_reason = message.text

    try:
        async with state.proxy() as data:
            selected_title = data.get('selected_title')
            episode = data.get('selected_episode')

        if not selected_title or episode is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        service = DubberService(db)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ –∑–∞–¥–µ—Ä–∂–∫–µ
        report = service.create_report(
            user_id=user_id,
            title_id=selected_title.id,
            episode=episode,
            status='delayed',
            comment=delay_reason
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        response = (f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</b>\n\n"
                    f"üé¨ <b>–¢–∞–π—Ç–ª:</b> {selected_title.name}\n"
                    f"üéØ <b>–°–µ—Ä–∏—è:</b> {episode}\n"
                    f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∏:</b> {delay_reason}\n\n"
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n"
                    f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–µ—Ä–∏—é?")

        await message.answer(response, parse_mode='HTML', reply_markup=get_dubber_menu())
        await state.finish()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–µ—Ä–∂–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()


async def handle_add_timer_role(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞'
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 'timer'
    """
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞' –æ—Ç {user_id} ({username})")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        service = DubberService(db)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = service.update_user_role(user_id, 'timer')

        if user:
            response = (f"‚úÖ <b>–í–∞–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ —Ç–∞–π–º–µ—Ä–∞!</b>\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                        f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–∞–π—Ç–ª—ã\n"
                        f"‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π—Ç–ª—ã\n"
                        f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–¥–∞–≤—à–∏—Ö\n"
                        f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                        f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π—Ç–ª?")

            await message.answer(response, parse_mode='HTML')
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ —Ç–∞–π–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_force_majeure(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–§–æ—Ä—Å-–º–∞–∂–æ—Ä'
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ
    """
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–§–æ—Ä—Å-–º–∞–∂–æ—Ä' –æ—Ç {user_id} ({username})")

    await message.answer(
        "‚ö†Ô∏è <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? –û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å?</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–≥–ª–∞ –ø–æ–Ω—è—Ç—å "
        "–∏ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ä—ã:",
        parse_mode='HTML',
        reply_markup=types.ReplyKeyboardRemove()
    )
    await DubberStates.force_majeure.set()


async def handle_force_majeure_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = message.from_user.id
    message_text = message.text

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        service = DubberService(db)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ
        force_majeure = service.create_force_majeure(user_id, message_text)

        response = (f"‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç:</b> {message_text}\n"
                    f"üïí <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {force_majeure.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.")

        await message.answer(response, parse_mode='HTML', reply_markup=get_dubber_menu())
        await state.finish()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()


async def handle_my_debts(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –¥–æ–ª–≥–∏'
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –Ω–µ—Å–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π
    """
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–æ–∏ –¥–æ–ª–≥–∏' –æ—Ç {user_id} ({username})")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        service = DubberService(db)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        debts = service.get_user_debts(user_id)

        if not debts:
            await message.answer("‚úÖ <b>–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–æ–ª–≥–æ–≤!</b>\n\n–í—Å–µ —Å–µ—Ä–∏–∏ —Å–¥–∞–Ω—ã –≤–æ–≤—Ä–µ–º—è. üëç",
                                 parse_mode='HTML')
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –¥–æ–ª–≥–∞—Ö
        response = "üìã <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–æ–ª–≥–∏:</b>\n\n"

        total_debts = 0
        delayed_debts = 0

        for debt in debts:
            total_debts += 1
            if debt['is_delayed']:
                delayed_debts += 1

            status_icon = "üî¥" if debt['status'] == 'not_submitted' else "üü°"
            status_text = "–ù–µ —Å–¥–∞–Ω–æ" if debt['status'] == 'not_submitted' else "–ó–∞–¥–µ—Ä–∂–∞–Ω–æ"

            response += (f"{status_icon} <b>{debt['title_name']}</b> - –°–µ—Ä–∏—è {debt['episode']}\n"
                         f"   üìä –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n")

            if debt['is_delayed'] and debt['comment']:
                response += f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {debt['comment']}\n"

            response += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response += (f"\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                     f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–ª–≥–æ–≤: <b>{total_debts}</b>\n"
                     f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∞–Ω–æ: <b>{delayed_debts}</b>\n"
                     f"‚Ä¢ –ù–µ —Å–¥–∞–Ω–æ: <b>{total_debts - delayed_debts}</b>")

        await message.answer(response, parse_mode='HTML')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–ª–≥–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def register_dubber_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–∞–±–±–µ—Ä–∞
    Args:
        dp: Dispatcher Aiogram
    """
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    dp.register_message_handler(handle_select_title, lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª', state=None)
    dp.register_message_handler(handle_add_timer_role, lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞')
    dp.register_message_handler(handle_force_majeure, lambda message: message.text == '–§–æ—Ä—Å-–º–∞–∂–æ—Ä')
    dp.register_message_handler(handle_my_debts, lambda message: message.text == '–ú–æ–∏ –¥–æ–ª–≥–∏')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    dp.register_message_handler(handle_title_selection, state=DubberStates.selecting_title)
    dp.register_message_handler(handle_episode_selection, state=DubberStates.selecting_episode)
    dp.register_message_handler(handle_status_selection, state=DubberStates.reporting_status)
    dp.register_message_handler(handle_delay_reason, state=DubberStates.reporting_delay)
    dp.register_message_handler(handle_force_majeure_message, state=DubberStates.force_majeure)