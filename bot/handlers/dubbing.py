from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from ..logger import logger, log_command
from ..database.db import ensure_user_exists, get_user_titles, add_report, get_user_debts, save_force_majeure
from ..states.dubber_state import DubberState

router = Router()


def get_dubber_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª")],
            [KeyboardButton(text="–ú–æ–∏ –¥–æ–ª–≥–∏")],
            [KeyboardButton(text="–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞—Ö")],
            [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


@router.message(F.text == "–í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª")
async def select_title(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª")

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞–π—Ç–ª
        await message.answer(
            "üé¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π—Ç–ª—ã:\n\n"
            "‚Ä¢ –¢–∞–π—Ç–ª 1114 (—Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: 5)\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
        )

    except Exception as e:
        logger.error(f"Error in –í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–ú–æ–∏ –¥–æ–ª–≥–∏")
async def my_debts(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–ú–æ–∏ –¥–æ–ª–≥–∏")
        await message.answer("üéâ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π! –í—Å–µ —Å–¥–∞–Ω–æ –≤ —Å—Ä–æ–∫.")

    except Exception as e:
        logger.error(f"Error in –ú–æ–∏ –¥–æ–ª–≥–∏: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞—Ö")
async def force_majeure(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞—Ö")
        await message.answer(
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è '–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞—Ö' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

    except Exception as e:
        logger.error(f"Error in –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞—Ö: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from .start import get_main_kb

        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_kb())

    except Exception as e:
        logger.error(f"Error in –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("test"))
async def test_command(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")

    @router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞")
    async def add_timer_role(message: Message):
        try:
            log_command(message.from_user.id, message.from_user.username, "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞")

            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ —Ç–∞–π–º–µ—Ä–∞ –≤ –ë–î
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

            await message.answer(
                "‚è∞ *–í–∞–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ —Ç–∞–π–º–µ—Ä–∞!*\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—é —Ç–∞–π—Ç–ª–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—É –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å–¥–∞—á–∏\n"
                "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–∞–π—Ç–ª?",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª")],
                        [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
                    ],
                    resize_keyboard=True
                )
            )

        except Exception as e:
            logger.error(f"Error in –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞")
async def add_timer_role(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞ –≤ –ë–î
        from ..database.db import add_timer_role as db_add_timer_role
        success = await db_add_timer_role(message.from_user.id)

        if success:
            await message.answer(
                "‚è∞ *–í–∞–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ —Ç–∞–π–º–µ—Ä–∞!*\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—é —Ç–∞–π—Ç–ª–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—É –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å–¥–∞—á–∏\n"
                "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–∞–π—Ç–ª?",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª")],
                        [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
                    ],
                    resize_keyboard=True
                )
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ —Ç–∞–π–º–µ—Ä–∞.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    except Exception as e:
        logger.error(f"Error in –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
