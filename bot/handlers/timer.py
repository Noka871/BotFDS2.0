from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from ..logger import logger, log_command
from ..states.timer_state import TimerState

router = Router()


def get_timer_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª"), KeyboardButton(text="–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–π—Ç–ª")],
            [KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–¥–∞–≤—à–∏—Ö"), KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
            [KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"), KeyboardButton(text="–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞—Ö")],
            [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


@router.message(F.text == "–¢–∞–π–º–µ—Ä")
async def timer_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–¢–∞–π–º–µ—Ä")

        await message.answer(
            "‚è∞ *–ü–∞–Ω–µ–ª—å —Ç–∞–π–º–µ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_timer_main_kb(),
            parse_mode="Markdown"
        )
        logger.info(f"User {message.from_user.id} entered timer menu")

    except Exception as e:
        logger.error(f"Error in –¢–∞–π–º–µ—Ä menu: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª")
async def create_title(message: Message, state: FSMContext):
    try:
        log_command(message.from_user.id, message.from_user.username, "–°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª")

        await message.answer(
            "üé¨ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞–π—Ç–ª–∞*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π—Ç–ª–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )
        await state.set_state(TimerState.creating_title)

    except Exception as e:
        logger.error(f"Error in –°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª: {e}", exc_info=True)


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–¥–∞–≤—à–∏—Ö")
async def view_schedule(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–¥–∞–≤—à–∏—Ö")

        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        schedule_text = """
üìä *–ì—Ä–∞—Ñ–∏–∫ —Å–¥–∞–≤—à–∏—Ö*:

*–¢–∞–π—Ç–ª 1114* (—Å–µ—Ä–∏—è 5):
‚Ä¢ User1 - ‚úÖ –°–¥–∞–Ω–æ
‚Ä¢ User2 - ‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ (1 –¥–µ–Ω—å)
‚Ä¢ User3 - ‚ùå –ù–µ —Å–¥–∞–Ω–æ

*–¢–∞–π—Ç–ª 5678* (—Å–µ—Ä–∏—è 3):
‚Ä¢ User4 - ‚úÖ –°–¥–∞–Ω–æ
‚Ä¢ User5 - ‚úÖ –°–¥–∞–Ω–æ
        """

        await message.answer(schedule_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–¥–∞–≤—à–∏—Ö: {e}", exc_info=True)


@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def create_broadcast(message: Message, state: FSMContext):
    try:
        log_command(message.from_user.id, message.from_user.username, "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")

        await message.answer(
            "üì¢ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )
        await state.set_state(TimerState.creating_broadcast)

    except Exception as e:
        logger.error(f"Error in –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: {e}", exc_info=True)


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")

        from .start import get_main_kb
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_kb())

    except Exception as e:
        logger.error(f"Error in –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: {e}", exc_info=True)