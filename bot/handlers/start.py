from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

from ..logger import logger, log_command

router = Router()


def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞–±–±–µ—Ä")],
            [KeyboardButton(text="–¢–∞–π–º–µ—Ä")],
            [KeyboardButton(text="–ê–¥–º–∏–Ω")]
        ],
        resize_keyboard=True
    )


@router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "/start")

        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=get_main_kb()
        )
        logger.info(f"User {message.from_user.id} started bot")

    except Exception as e:
        logger.error(f"Error in /start command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "/menu")

        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_kb()
        )
        logger.info(f"User {message.from_user.id} opened menu")

    except Exception as e:
        logger.error(f"Error in /menu command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("help"))
async def cmd_help(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "/help")

        help_text = """
ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*:

*/start* - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
*/menu* - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
*/stats* - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

*–†–æ–ª–∏*:
‚Ä¢ *–î–∞–±–±–µ—Ä* - –ê–∫—Ç–µ—Ä –¥—É–±–ª—è–∂–∞, —Å–¥–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏
‚Ä¢ *–¢–∞–π–º–µ—Ä* - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–≤–µ–¥–µ–Ω–∏—é –∑–≤—É–∫–∞
‚Ä¢ *–ê–¥–º–∏–Ω* - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∏ –æ—Ç—á–µ—Ç—ã

–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.
        """

        await message.answer(help_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in /help command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "/stats")

        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        stats_text = """
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*:

‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 15
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤: 8
‚Ä¢ –°–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π: 124
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: 3

*–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:
‚Ä¢ –í–∞—à–∏—Ö —Ç–∞–π—Ç–ª–æ–≤: 2
‚Ä¢ –°–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π: 15
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: 0 ‚úÖ
        """

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in /stats command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–î–∞–±–±–µ—Ä")
async def dubbing_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–î–∞–±–±–µ—Ä")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞–±–±–µ—Ä–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å circular imports
        from ..keyboards.dubber_kb import get_dubber_main_kb

        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –¥—É–±–ª—è–∂–∞!\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
            "–í–∞—à–∞ —Ä–æ–ª—å: dubber\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_dubber_main_kb()
        )
        logger.info(f"User {message.from_user.id} entered dubber menu")

    except Exception as e:
        logger.error(f"Error in –î–∞–±–±–µ—Ä menu: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–¢–∞–π–º–µ—Ä")
async def timer_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–¢–∞–π–º–µ—Ä")
        await message.answer("–†–∞–∑–¥–µ–ª –¢–∞–π–º–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

    except Exception as e:
        logger.error(f"Error in –¢–∞–π–º–µ—Ä menu: {e}", exc_info=True)


@router.message(F.text == "–ê–¥–º–∏–Ω")
async def admin_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–ê–¥–º–∏–Ω")
        await message.answer("–†–∞–∑–¥–µ–ª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

    except Exception as e:
        logger.error(f"Error in –ê–¥–º–∏–Ω menu: {e}", exc_info=True)