from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

from ..logger import logger, log_command
from ..keyboards.dubber_kb import get_main_kb, get_dubber_main_kb, get_timer_main_kb, get_admin_main_kb

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "/start")

        await message.answer(
            "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –¥—É–±–ª—è–∂–∞!*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=get_main_kb(),
            parse_mode="Markdown"
        )
        logger.info(f"User {message.from_user.id} started bot")

    except Exception as e:
        logger.error(f"Error in /start command: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "/menu")

        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_kb()
        )
        logger.info(f"User {message.from_user.id} opened menu")

    except Exception as e:
        logger.error(f"Error in /menu command: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("help"))
async def cmd_help(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "/help")

        help_text = """
ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*:

üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üë• *–†–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:*
üé§ *–î–∞–±–±–µ—Ä* - –ê–∫—Ç–µ—Ä –¥—É–±–ª—è–∂–∞, —Å–¥–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏
‚è∞ *–¢–∞–π–º–µ—Ä* - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–≤–µ–¥–µ–Ω–∏—é –∑–≤—É–∫–∞
üëë *–ê–¥–º–∏–Ω* - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∏ –æ—Ç—á–µ—Ç—ã

üí° *–°–æ–≤–µ—Ç:* –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!
        """

        await message.answer(help_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in /help command: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "/stats")

        stats_text = """
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*:

üèÜ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 15
‚Ä¢ üé¨ –¢–∞–π—Ç–ª–æ–≤: 8
‚Ä¢ üìÄ –í—Å–µ–≥–æ —Å–µ—Ä–∏–π: 245
‚Ä¢ ‚úÖ –°–¥–∞–Ω–æ –≤–æ–≤—Ä–µ–º—è: 89%
‚Ä¢ ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: 11%

üåü *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ üé¨ –í–∞—à–∏—Ö —Ç–∞–π—Ç–ª–æ–≤: 2
‚Ä¢ ‚úÖ –°–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π: 15
‚Ä¢ ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: 0 üéâ
        """

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in /stats command: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "üé§ –î–∞–±–±–µ—Ä")
async def dubbing_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–î–∞–±–±–µ—Ä")

        await message.answer(
            "üéß *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –¥–∞–±–±–µ—Ä–∞!*\n\n"
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
            "üé§ –í–∞—à–∞ —Ä–æ–ª—å: –î–∞–±–±–µ—Ä\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_dubber_main_kb(),
            parse_mode="Markdown"
        )
        logger.info(f"User {message.from_user.id} entered dubber menu")

    except Exception as e:
        logger.error(f"Error in –î–∞–±–±–µ—Ä menu: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "‚è∞ –¢–∞–π–º–µ—Ä")
async def timer_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–¢–∞–π–º–µ—Ä")

        await message.answer(
            "‚è∞ *–ü–∞–Ω–µ–ª—å —Ç–∞–π–º–µ—Ä–∞*\n\n"
            "üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —Å—Ä–æ–∫–∞–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_timer_main_kb(),
            parse_mode="Markdown"
        )
        logger.info(f"User {message.from_user.id} entered timer menu")

    except Exception as e:
        logger.error(f"Error in –¢–∞–π–º–µ—Ä menu: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "üëë –ê–¥–º–∏–Ω")
async def admin_menu(message: Message):
    try:
        log_command(message.from_user.id, message.from_user.username, "–ê–¥–º–∏–Ω")

        await message.answer(
            "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            reply_markup=get_admin_main_kb(),
            parse_mode="Markdown"
        )
        logger.info(f"User {message.from_user.id} entered admin menu")

    except Exception as e:
        logger.error(f"Error in –ê–¥–º–∏–Ω menu: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")