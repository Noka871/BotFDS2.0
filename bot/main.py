import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ContextTypes, ConversationHandler
)
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')


class DubbingBot:
    def __init__(self, token: str):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º
        self.application = Application.builder().token(token).build()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db = Database()
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
        # pattern="^role_" - –ª–æ–≤–∏—Ç –≤—Å–µ callback_data –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "role_"
        self.application.add_handler(CallbackQueryHandler(self.role_callback, pattern="^role_"))
        # pattern="^menu_" - –ª–æ–≤–∏—Ç –≤—Å–µ callback_data –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "menu_"
        self.application.add_handler(CallbackQueryHandler(self.menu_callback, pattern="^menu_"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
        user = update.effective_user
        logger.info(f"User {user.id} started the bot")

        # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name or ""  # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–º–∏–ª–∏–∏ - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        )

        # –°–û–ó–î–ê–ï–ú –ò–ù–õ–ê–ô–ù-–ö–õ–ê–í–ò–ê–¢–£–†–£ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        keyboard = [
            # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [
                InlineKeyboardButton("üé§ –î–∞–±–±–µ—Ä", callback_data="role_dubber"),
                InlineKeyboardButton("üéß –¢–∞–π–º–µ—Ä", callback_data="role_timer")
            ],
            # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [
                InlineKeyboardButton("üëë –ê–¥–º–∏–Ω", callback_data="role_admin")
            ]
        ]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ä–∞–∑–º–µ—Ç–∫—É
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
            reply_markup=reply_markup  # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–¥–µ—Å—å
        )

    async def role_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        query = update.callback_query
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ)
        await query.answer()

        user = query.from_user
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "role_")
        role = query.data.replace("role_", "")

        logger.info(f"User {user.id} selected role: {role}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.update_user_role(user.id, role)

        # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        role_name = self.get_role_name(role)

        # –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        await query.edit_message_text(
            text=f"‚úÖ –†–æ–ª—å '{role_name}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                 f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
        )

    async def menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ

        user = query.from_user
        action = query.data.replace("menu_", "")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ

        logger.info(f"User {user.id} selected menu action: {action}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_data = self.db.get_user(user.id)
        role = user_data[5] if user_data else "dubber"  # 5-–π —ç–ª–µ–º–µ–Ω—Ç - —Ä–æ–ª—å

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == "back":
            await self.show_main_menu_from_callback(update, role)
        elif action == "select_title":
            await self.show_titles_menu(update, user.id)
        elif action == "warning":
            await query.edit_message_text("‚ö†Ô∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...")
        elif action == "debts":
            await self.show_user_debts(update, user.id)
        elif action == "add_timer_role":
            await self.add_timer_role(update, user.id)
        else:
            await query.edit_message_text("üõ†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def show_user_debts(self, update: Update, user_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        debts = self.db.get_user_debts(user_id)

        if debts:
            debt_text = "üí≥ –í–∞—à–∏ –¥–æ–ª–≥–∏:\n\n"
            for debt in debts:
                debt_text += f"‚Ä¢ {debt[0]} - —Å–µ—Ä–∏—è {debt[1]} ({debt[2]})\n"
            await query.edit_message_text(debt_text)
        else:
            await query.edit_message_text("üéâ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤!")

    async def add_timer_role(self, update: Update, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞"""
        query = update.callback_query
        self.db.update_user_role(user_id, "timer")
        await query.edit_message_text("‚úÖ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ —Ç–∞–π–º–µ—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
        ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –¥—É–±–ª—è–∂–∞

        –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        /help - –ü–æ–º–æ—â—å

        –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        ‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –æ —Å–¥–∞—á–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–µ–∫
        ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏—è—Ö
        ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞—Ö
        ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–ª–≥–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        await update.message.reply_text(help_text)

    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)

        if not user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return

        role = user_data[5]  # 5-–π —ç–ª–µ–º–µ–Ω—Ç - —Ä–æ–ª—å
        await self.show_main_menu(update, role)

    async def show_main_menu(self, update: Update, role: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if role == "dubber":
            keyboard = [
                [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_select_title")],
                [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ", callback_data="menu_warning")],
                [InlineKeyboardButton("üí≥ –ú–æ–∏ –¥–æ–ª–≥–∏", callback_data="menu_debts")],
                [InlineKeyboardButton("üîÑ –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞", callback_data="menu_add_timer_role")]
            ]
        elif role == "timer":
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_create_title")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_edit_title")],
                [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Å–¥–∞—á", callback_data="menu_schedule")],
                [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="menu_broadcast")],
                [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data="menu_warnings")]
            ]
        else:  # admin
            keyboard = [
                [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_select_title")],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_create_title")],
                [InlineKeyboardButton("üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="menu_export")],
                [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="menu_broadcast")],
                [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data="menu_warnings")]
            ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ({self.get_role_name(role)})\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def show_main_menu_from_callback(self, update: Update, role: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        query = update.callback_query

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ show_main_menu)
        if role == "dubber":
            keyboard = [
                [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_select_title")],
                [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ", callback_data="menu_warning")],
                [InlineKeyboardButton("üí≥ –ú–æ–∏ –¥–æ–ª–≥–∏", callback_data="menu_debts")],
                [InlineKeyboardButton("üîÑ –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞", callback_data="menu_add_timer_role")]
            ]
        elif role == "timer":
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_create_title")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_edit_title")],
                [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Å–¥–∞—á", callback_data="menu_schedule")],
                [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="menu_broadcast")],
                [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data="menu_warnings")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_select_title")],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_create_title")],
                [InlineKeyboardButton("üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="menu_export")],
                [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="menu_broadcast")],
                [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data="menu_warnings")]
            ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            text=f"üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ({self.get_role_name(role)})\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def show_titles_menu(self, update: Update, user_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞–π—Ç–ª–æ–≤"""
        query = update.callback_query
        titles = self.db.get_user_titles(user_id)

        if not titles:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π—Ç–ª–∞
        keyboard = []
        for title in titles:
            keyboard.append([InlineKeyboardButton(f"üìÄ {title[1]}", callback_data=f"title_{title[0]}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üì∫ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª:",
            reply_markup=reply_markup
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    def get_role_name(self, role: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
        role_names = {
            "dubber": "–î–∞–±–±–µ—Ä",
            "timer": "–¢–∞–π–º–µ—Ä",
            "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        return role_names.get(role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        self.application.run_polling()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
            return

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
        bot = DubbingBot(BOT_TOKEN)
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()