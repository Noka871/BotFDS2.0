import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ContextTypes, ConversationHandler
)
from database import Database

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ====================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO  # DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤, INFO –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
)
logger = logging.getLogger(__name__)

# ==================== –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ====================
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env

BOT_TOKEN = os.getenv('BOT_TOKEN')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ .env
ADMIN_ID = os.getenv('ADMIN_ID')  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ .env


# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ====================
class DubbingBot:
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        :param token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
        """
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º
        self.application = Application.builder().token(token).build()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db = Database()
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.setup_handlers()

    def setup_handlers(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        –í–ê–ñ–ù–û: –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!
        """
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")

        # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¢–ï–ö–°–¢–û–í–´–• –ö–û–ú–ê–ù–î (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /)
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CommandHandler("test", self.test_command))  # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞

        # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CALLBACK_QUERY (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏)
        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ!

        # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ª–æ–≤–∏—Ç –í–°–ï callback_data
        self.application.add_handler(CallbackQueryHandler(self.universal_callback))

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.role_callback, pattern="^role_"))
        self.application.add_handler(CallbackQueryHandler(self.menu_callback, pattern="^menu_"))
        self.application.add_handler(CallbackQueryHandler(self.test_callback, pattern="^test_"))

        # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –û–ë–´–ß–ù–´–• –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–Ω–µ –∫–æ–º–∞–Ω–¥)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name or ""  # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–º–∏–ª–∏–∏ - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        )

        # –°–û–ó–î–ê–ï–ú –ò–ù–õ–ê–ô–ù-–ö–õ–ê–í–ò–ê–¢–£–†–£ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        # InlineKeyboardButton —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [InlineKeyboardButton("üé§ –î–∞–±–±–µ—Ä", callback_data="role_dubber")],
            # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [InlineKeyboardButton("üéß –¢–∞–π–º–µ—Ä", callback_data="role_timer")],
            # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω", callback_data="role_admin")]
        ]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è Telegram
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        # reply_markup - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
            reply_markup=reply_markup
        )

    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫
        """
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ 1", callback_data="test_1")],
            [InlineKeyboardButton("–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ 2", callback_data="test_2")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üîß –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=reply_markup
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
        ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –¥—É–±–ª—è–∂–∞

        –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
        /help - –ü–æ–º–æ—â—å
        /test - –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫

        –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        ‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –æ —Å–¥–∞—á–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–µ–∫
        ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏—è—Ö
        ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞—Ö
        ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–ª–≥–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        await update.message.reply_text(help_text)

    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)

        if not user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return

        role = user_data[5]  # 5-–π —ç–ª–µ–º–µ–Ω—Ç –≤ tuple - —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        keyboard = [
            [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª", callback_data="menu_select_title")],
            [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ", callback_data="menu_warning")],
            [InlineKeyboardButton("üí≥ –ú–æ–∏ –¥–æ–ª–≥–∏", callback_data="menu_debts")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ({self.get_role_name(role)})\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK (–ù–ê–ñ–ê–¢–ò–Ø –ù–ê –ö–ù–û–ü–ö–ò) ====================

    async def universal_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• callback_data
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
        """
        query = update.callback_query
        await query.answer()  # –í–∞–∂–Ω–æ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏")

        user = query.from_user
        callback_data = query.data

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π callback_data
        logger.info(f"üîç UNIVERSAL: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: '{callback_data}'")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
        await query.edit_message_text(
            f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!\n"
            f"Callback_data: '{callback_data}'\n\n"
            f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫: universal_callback"
        )

    async def role_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ (pattern='^role_')
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ universal_callback
        """
        query = update.callback_query
        await query.answer()

        user = query.from_user
        role = query.data.replace("role_", "")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data

        logger.info(f"ROLE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: {role}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.update_user_role(user.id, role)

        # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        role_name = self.get_role_name(role)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            text=f"‚úÖ –†–æ–ª—å '{role_name}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                 f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
        )

    async def menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (pattern='^menu_')
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ universal_callback
        """
        query = update.callback_query
        await query.answer()

        user = query.from_user
        action = query.data.replace("menu_", "")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ

        logger.info(f"MENU: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        await query.edit_message_text(f"üìã –í—ã–±—Ä–∞–Ω–æ –º–µ–Ω—é: {action}")

    async def test_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ (pattern='^test_')
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ universal_callback
        """
        query = update.callback_query
        await query.answer()

        test_number = query.data.replace("test_", "")
        user = query.from_user

        logger.info(f"TEST: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É: {test_number}")
        await query.edit_message_text(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ {test_number} —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)"""
        await update.message.reply_text("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    def get_role_name(self, role: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
        role_names = {
            "dubber": "–î–∞–±–±–µ—Ä",
            "timer": "–¢–∞–π–º–µ—Ä",
            "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        return role_names.get(role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        self.application.run_polling()  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling


# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
            return

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = DubbingBot(BOT_TOKEN)
        bot.run()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    main()