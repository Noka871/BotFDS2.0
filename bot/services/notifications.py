# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime, timedelta
from sqlalchemy.future import select

from models.database import AsyncSessionLocal
from models.models import Title, User, Report


async def send_daily_reminders(bot):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ—Å–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏—è—Ö"""
    async with AsyncSessionLocal() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–¥–∞—á–∏
        result = await session.execute(
            select(Report)
            .where(Report.deadline < datetime.utcnow())
            .where(Report.status.is_(None))
        )
        overdue_reports = result.scalars().all()

        for report in overdue_reports:
            try:
                await bot.send_message(
                    report.user.user_id,
                    f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ</b>\n\n"
                    f"üé¨ –¢–∞–π—Ç–ª: {report.title.name}\n"
                    f"üì∫ –°–µ—Ä–∏—è: {report.episode}\n"
                    f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {report.deadline.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–∞–π—Ç–µ —Å–µ—Ä–∏—é –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {report.user.username}: {e}")


async def schedule_daily_reminders(bot):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    scheduler = AsyncIOScheduler()

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    scheduler.add_job(
        send_daily_reminders,
        CronTrigger(hour=10, minute=0),
        args=[bot]
    )

    scheduler.start()