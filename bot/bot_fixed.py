import os
import logging
import requests
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê ====================
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
env_path = r'D:\BotFDS2.0\.env'  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
load_dotenv(env_path)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')

# ‚òÖ‚òÖ‚òÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ‚òÖ‚òÖ‚òÖ
if not BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞:")
    print("BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
    exit(1)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # ‚òÖ –ú–µ–Ω—è–µ–º –Ω–∞ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤ ‚òÖ
)
logger = logging.getLogger(__name__)


# ==================== –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="search_start")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_info"),
             InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "‚Ä¢ /start - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "**–ö–Ω–æ–ø–∫–∏:**\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    ‚òÖ‚òÖ‚òÖ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–ô –ù–ê –ö–ù–û–ü–ö–ò ‚òÖ‚òÖ‚òÖ
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
        query = update.callback_query
        user_id = query.from_user.id
        callback_data = query.data

        logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç {user_id}: {callback_data}")

        # ‚òÖ‚òÖ‚òÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ‚òÖ‚òÖ‚òÖ
        await query.answer()
        logger.debug("Callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫
        if callback_data == "search_start":
            await handle_search(query)

        elif callback_data == "help_info":
            await handle_help(query)

        elif callback_data == "settings":
            await handle_settings(query)

        elif callback_data == "stats":
            await handle_stats(query)

        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass


async def handle_search(query) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        keyboard = [
            [InlineKeyboardButton("üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="search_db")],
            [InlineKeyboardButton("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç", callback_data="search_web")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]

        await query.edit_message_text(
            "üîç **–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–¥–µ –∏—Å–∫–∞—Ç—å:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_search: {e}")


async def handle_help(query) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = (
        "‚ùì **–ü–æ–º–æ—â—å**\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫' –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )

    await query.edit_message_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
    )


async def handle_settings(query) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await query.edit_message_text(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
    )


async def handle_stats(query) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats_text = (
        "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        "‚Ä¢ –ü–æ–∏—Å–∫–æ–≤: 12\n"
        "‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: 45 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 3 –¥–Ω—è\n\n"
        "_–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏_"
    )

    await query.edit_message_text(
        stats_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_refresh"),
             InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id

    logger.debug(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é
    if not text.startswith('/'):
        await update.message.reply_text(
            "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã!\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é."
        )


# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def cleanup_old_updates():
    """
    –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ updates —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º
    """
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?offset=-1"
        response = requests.get(url)
        logger.info("–°—Ç–∞—Ä—ã–µ updates –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å updates: {e}")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()

        # ‚òÖ‚òÖ‚òÖ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ‚òÖ‚òÖ‚òÖ

        # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))

        # 2. ‚òÖ‚òÖ‚òÖ –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ ‚òÖ‚òÖ‚òÖ
        application.add_handler(CallbackQueryHandler(handle_callback_query))

        # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ updates –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        cleanup_old_updates()

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:")
        for i, handler in enumerate(application.handlers[0]):
            logger.info(f"  {i + 1}. {handler.callback.__name__}")

        # ‚òÖ‚òÖ‚òÖ –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢–ê –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò ‚òÖ‚òÖ‚òÖ
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")

        application.run_polling(
            poll_interval=1.0,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
            timeout=10,  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
            drop_pending_updates=True,  # ‚òÖ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ updates ‚òÖ
            allowed_updates=['message', 'callback_query']  # ‚òÖ –†–∞–∑—Ä–µ—à–∞–µ–º callback ‚òÖ
        )

    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise


if __name__ == '__main__':
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    print("=" * 50)
    print("ü§ñ BOT FDS 2.0 - –ó–ê–ü–£–°–ö")
    print("=" * 50)
    print(f"–¢–æ–∫–µ–Ω: {BOT_TOKEN[:15]}...")
    print("–†–µ–∂–∏–º: DEBUG (–ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)")
    print("=" * 50)

    main()