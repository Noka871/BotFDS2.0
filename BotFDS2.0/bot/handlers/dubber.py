from aiogram import types
from aiogram.dispatcher import FSMContext
from services.database import Database
from services.notifications import Notifier

db = Database()
notifier = Notifier()


async def handle_dubber_menu(message: types.Message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        "üì∫ –í—ã–±—Ä–∞—Ç—å —Ç–∞–π—Ç–ª",
        "‚è± –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Ç–∞–π–º–µ—Ä–∞",
        "‚ö†Ô∏è –§–æ—Ä—Å-–º–∞–∂–æ—Ä",
        "üìã –ú–æ–∏ –¥–æ–ª–≥–∏",
        "üîô –ù–∞–∑–∞–¥"
    )
    await message.answer("–ú–µ–Ω—é –¥–∞–±–±–µ—Ä–∞:", reply_markup=markup)


async def select_title(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    titles = await db.get_user_titles(user_id)

    if not titles:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    for title in titles[:5]:
        markup.add(types.InlineKeyboardButton(
            text=f"{title['name']} (—Å–µ—Ä–∏—è {title['current_episode']})",
            callback_data=f"title_{title['id']}"
        ))

    if len(titles) > 5:
        markup.add(types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_page_1"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª:", reply_markup=markup)
    await state.set_state(Form.dubber_report)