from functools import wraps
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot.config import ADMIN_IDS


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(func):
    @wraps(func)
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id not in ADMIN_IDS:
            await message.answer("üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        return await func(message, *args, **kwargs)

    return wrapper


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastState(StatesGroup):
    message = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞
@admin_required
async def export_report(message: types.Message):
    """–í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel"""
    try:
        await message.answer("üìä –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞...")

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä:
        import io
        from openpyxl import Workbook

        wb = Workbook()
        ws = wb.active
        ws.title = "–û—Ç—á–µ—Ç"
        ws.append(["–î–∞—Ç–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–°—Ç–∞—Ç—É—Å"])
        ws.append(["2023-01-01", "User1", "–ê–∫—Ç–∏–≤–µ–Ω"])

        excel_file = io.BytesIO()
        wb.save(excel_file)
        excel_file.seek(0)

        await message.answer_document(
            types.InputFile(excel_file, filename="report.xlsx"),
            caption="‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@admin_required
async def start_broadcast(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await BroadcastState.message.set()
    await message.answer("üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@admin_required
async def process_broadcast(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä:
        await message.answer(f"üîî –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {message.text}\n\n"
                             "–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    finally:
        await state.finish()


def register_admin_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    dp.register_message_handler(export_report, text="–í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç")
    dp.register_message_handler(start_broadcast, text="–†–∞—Å—Å—ã–ª–∫–∞")
    dp.register_message_handler(process_broadcast, state=BroadcastState.message)