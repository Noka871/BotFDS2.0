"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""
import threading
import time
from datetime import datetime, timedelta
from telegram import Bot
from database import Database
from config import REMINDER_TIME_HOUR

class NotificationManager:
    def __init__(self, bot_token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.bot = Bot(token=bot_token)
        self.db = Database()
        self._stop_event = threading.Event()

    def start_daily_notifications(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        thread = threading.Thread(target=self._daily_notification_loop)
        thread.daemon = True
        thread.start()

    def _daily_notification_loop(self):
        """–¶–∏–∫–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while not self._stop_event.is_set():
            now = datetime.utcnow()
            target_time = now.replace(hour=REMINDER_TIME_HOUR, minute=0, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Ü–µ–ª–µ–≤–æ–µ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if now > target_time:
                target_time += timedelta(days=1)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            sleep_seconds = (target_time - now).total_seconds()
            time.sleep(sleep_seconds)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self._send_pending_reminders()

    def _send_pending_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –Ω–µ—Å–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏—è—Ö"""
        pending_episodes = self.db.get_pending_episodes()
        
        for episode in pending_episodes:
            message = self._format_reminder_message(episode)
            try:
                self.bot.send_message(chat_id=episode['dubber_id'], text=message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {episode['dubber_id']}: {e}")

    def _format_reminder_message(self, episode: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        deadline = datetime.strptime(episode['deadline'], '%Y-%m-%d %H:%M:%S')
        is_overdue = datetime.now() > deadline
        
        status = "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ" if is_overdue else "‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ"
        deadline_str = deadline.strftime('%d.%m.%Y')
        
        return (
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–µ—Ä–∏–∏!\n\n"
            f"–¢–∞–π—Ç–ª: {episode['title_name']}\n"
            f"–°–µ—Ä–∏—è: {episode['episode_number']}\n"
            f"–°—Ä–æ–∫ —Å–¥–∞—á–∏: {deadline_str}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"
        )

    def notify_new_marks(self, title_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–±–±–µ—Ä–æ–≤ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–∫"""
        dubbers = self.db.get_title_dubbers(title_id)
        title_name = self.db.get_title_name(title_id)
        deadline = (datetime.now() + timedelta(days=2)).strftime('%d.%m.%Y')
        
        for dubber in dubbers:
            message = (
                f"üéß –ù–æ–≤—ã–µ –º–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤—ã!\n\n"
                f"–¢–∞–π—Ç–ª: {title_name}\n"
                f"–°—Ä–æ–∫ —Å–¥–∞—á–∏: {deadline}\n\n"
                f"–£ –≤–∞—Å –µ—Å—Ç—å 2 –¥–Ω—è –Ω–∞ –∑–∞–ø–∏—Å—å –¥–æ—Ä–æ–∂–∫–∏."
            )
            try:
                self.bot.send_message(chat_id=dubber['user_id'], text=message)
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –≤ –ë–î
                self.db.set_episode_deadline(title_id, dubber['user_id'], datetime.now() + timedelta(days=2))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–±–±–µ—Ä–∞ {dubber['user_id']}: {e}")

    def notify_penalty(self, dubber_id: int, amount: int, reason: str, title_name: str, episode_num: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–∞"""
        message = (
            f"üö® –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —à—Ç—Ä–∞—Ñ!\n\n"
            f"–¢–∞–π—Ç–ª: {title_name}\n"
            f"–°–µ—Ä–∏—è: {episode_num}\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ç–∞–π–º–µ—Ä—É."
        )
        self.bot.send_message(chat_id=dubber_id, text=message)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self._stop_event.set()
        self.db.close()