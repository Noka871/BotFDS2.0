# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
import sys
from pathlib import Path
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from .database import Database
from .config import config

sys.path.append(str(Path(__file__).parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()
storage = MemoryStorage()
db = Database()


# ============== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ==============
class DubberStates(StatesGroup):
    select_title = State()
    select_episode = State()
    report_status = State()
    report_comment = State()


class TimerStates(StatesGroup):
    create_title = State()
    assign_penalty = State()


# ============== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==============
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîä –î–∞–±–±–µ—Ä"), KeyboardButton(text="‚è± –¢–∞–π–º–µ—Ä")],
            [KeyboardButton(text="üëë –ê–¥–º–∏–Ω")] if config.ADMIN_ID else []
        ],
        resize_keyboard=True
    )


def get_dubber_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û—Ç–º–µ—Ç–∏—Ç—å —Å–¥–∞—á—É")],
            [KeyboardButton(text="üìä –ú–æ–∏ –¥–æ–ª–≥–∏"), KeyboardButton(text="üö® –§–æ—Ä—Å-–º–∞–∂–æ—Ä")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


# ============== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==============
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await db.set_user_role(message.from_user.id, "unassigned", message.from_user.username)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=get_main_menu())


@dp.message(F.text == "üîä –î–∞–±–±–µ—Ä")
async def dubber_mode(message: types.Message):
    await db.set_user_role(message.from_user.id, "dubber")
    await message.answer("–†–µ–∂–∏–º –¥–∞–±–±–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=get_dubber_menu())


# ============== –û–¢–ß–ï–¢–ù–û–°–¢–¨ –î–ê–ë–ë–ï–†–û–í ==============
@dp.message(F.text == "üìù –û—Ç–º–µ—Ç–∏—Ç—å —Å–¥–∞—á—É")
async def start_report(message: types.Message, state: FSMContext):
    titles = await db.get_user_titles(message.from_user.id)
    if not titles:
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤")

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=title)] for title in titles],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª:", reply_markup=keyboard)
    await state.set_state(DubberStates.select_title)


@dp.message(DubberStates.select_title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏:")
    await state.set_state(DubberStates.select_episode)


@dp.message(DubberStates.select_episode)
async def process_episode(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    await state.update_data(episode=int(message.text))

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –°–¥–∞–ª"), KeyboardButton(text="‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–°—Ç–∞—Ç—É—Å —Å–¥–∞—á–∏:", reply_markup=keyboard)
    await state.set_state(DubberStates.report_status)


# ============== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==============
async def main():
    await db.init_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())