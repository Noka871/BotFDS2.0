# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from dotenv import load_dotenv
from os import getenv
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

dp = Dispatcher()


@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    try:
        await message.answer(
            "üîÆ <b>WitchKSH Bot</b>\n\n"
            "‚ú® <u>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</u>:\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
            "/help - –ü–æ–º–æ—â—å\n"
            "/menu - –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –¥–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


async def main():
    try:
        token = getenv("BOT_TOKEN")
        if not token:
            raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø–µ—Ä–µ–¥–∞—á–∏ parse_mode
        bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())